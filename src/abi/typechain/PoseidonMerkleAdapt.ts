/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TokenDataStruct = {
  tokenType: BigNumberish;
  tokenAddress: AddressLike;
  tokenSubID: BigNumberish;
};

export type TokenDataStructOutput = [
  tokenType: bigint,
  tokenAddress: string,
  tokenSubID: bigint
] & { tokenType: bigint; tokenAddress: string; tokenSubID: bigint };

export type CommitmentPreimageStruct = {
  npk: BytesLike;
  token: TokenDataStruct;
  value: BigNumberish;
};

export type CommitmentPreimageStructOutput = [
  npk: string,
  token: TokenDataStructOutput,
  value: bigint
] & { npk: string; token: TokenDataStructOutput; value: bigint };

export declare namespace PoseidonMerkleAccumulator {
  export type ShieldCiphertextStruct = {
    encryptedBundle: [BytesLike, BytesLike, BytesLike];
    shieldKey: BytesLike;
  };

  export type ShieldCiphertextStructOutput = [
    encryptedBundle: [string, string, string],
    shieldKey: string
  ] & { encryptedBundle: [string, string, string]; shieldKey: string };
}

export declare namespace PoseidonMerkleVerifier {
  export type ShieldRequestStruct = {
    ciphertext: PoseidonMerkleAccumulator.ShieldCiphertextStruct;
    preimage: CommitmentPreimageStruct;
  };

  export type ShieldRequestStructOutput = [
    ciphertext: PoseidonMerkleAccumulator.ShieldCiphertextStructOutput,
    preimage: CommitmentPreimageStructOutput
  ] & {
    ciphertext: PoseidonMerkleAccumulator.ShieldCiphertextStructOutput;
    preimage: CommitmentPreimageStructOutput;
  };
}

export declare namespace PoseidonMerkleAdapt {
  export type CallStruct = {
    to: AddressLike;
    data: BytesLike;
    value: BigNumberish;
  };

  export type CallStructOutput = [to: string, data: string, value: bigint] & {
    to: string;
    data: string;
    value: bigint;
  };

  export type TokenTransferStruct = {
    token: TokenDataStruct;
    to: AddressLike;
    value: BigNumberish;
  };

  export type TokenTransferStructOutput = [
    token: TokenDataStructOutput,
    to: string,
    value: bigint
  ] & { token: TokenDataStructOutput; to: string; value: bigint };
}

export interface PoseidonMerkleAdaptInterface extends Interface {
  getFunction(
    nameOrSignature: "execute" | "multicall" | "transfer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CallError"): EventFragment;

  encodeFunctionData(functionFragment: "execute", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PoseidonMerkleAdapt.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PoseidonMerkleAdapt.TokenTransferStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
}

export namespace CallErrorEvent {
  export type InputTuple = [callIndex: BigNumberish, revertReason: BytesLike];
  export type OutputTuple = [callIndex: bigint, revertReason: string];
  export interface OutputObject {
    callIndex: bigint;
    revertReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoseidonMerkleAdapt extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: PoseidonMerkleAdaptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [_data: BytesLike],
    [PoseidonMerkleVerifier.ShieldRequestStructOutput[]],
    "nonpayable"
  >;

  multicall: TypedContractMethod<
    [_calls: PoseidonMerkleAdapt.CallStruct[]],
    [void],
    "payable"
  >;

  transfer: TypedContractMethod<
    [_transfers: PoseidonMerkleAdapt.TokenTransferStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_data: BytesLike],
    [PoseidonMerkleVerifier.ShieldRequestStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<
    [_calls: PoseidonMerkleAdapt.CallStruct[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_transfers: PoseidonMerkleAdapt.TokenTransferStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CallError"
  ): TypedContractEvent<
    CallErrorEvent.InputTuple,
    CallErrorEvent.OutputTuple,
    CallErrorEvent.OutputObject
  >;

  filters: {
    "CallError(uint256,bytes)": TypedContractEvent<
      CallErrorEvent.InputTuple,
      CallErrorEvent.OutputTuple,
      CallErrorEvent.OutputObject
    >;
    CallError: TypedContractEvent<
      CallErrorEvent.InputTuple,
      CallErrorEvent.OutputTuple,
      CallErrorEvent.OutputObject
    >;
  };
}
