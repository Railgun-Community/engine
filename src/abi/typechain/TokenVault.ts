/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TokenDataStruct = {
  tokenType: BigNumberish;
  tokenAddress: AddressLike;
  tokenSubID: BigNumberish;
};

export type TokenDataStructOutput = [
  tokenType: bigint,
  tokenAddress: string,
  tokenSubID: bigint
] & { tokenType: bigint; tokenAddress: string; tokenSubID: bigint };

export interface TokenVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addVector"
      | "adjustByRatio"
      | "changeFee"
      | "changeRegistry"
      | "changeTreasury"
      | "checkSafetyVectors"
      | "getBalances"
      | "getFee"
      | "getTokenData"
      | "getTokenID"
      | "initialize"
      | "internalBalances"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "registry"
      | "removeVector"
      | "renounceOwnership"
      | "safetyVector"
      | "shieldFee"
      | "storeTokenData"
      | "supportsInterface"
      | "tokenIDMapping"
      | "transferOwnership"
      | "transferTokenIn"
      | "transferTokenOut"
      | "treasury"
      | "unshieldFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeChange"
      | "Initialized"
      | "OwnershipTransferred"
      | "RegistryChange"
      | "TreasuryChange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustByRatio",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSafetyVectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenID",
    values: [TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safetyVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shieldFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storeTokenData",
    values: [TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIDMapping",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenIn",
    values: [AddressLike, BigNumberish, TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOut",
    values: [AddressLike, BigNumberish, TokenDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unshieldFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addVector", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustByRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSafetyVectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safetyVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shieldFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIDMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unshieldFee",
    data: BytesLike
  ): Result;
}

export namespace FeeChangeEvent {
  export type InputTuple = [shieldFee: BigNumberish, unshieldFee: BigNumberish];
  export type OutputTuple = [shieldFee: bigint, unshieldFee: bigint];
  export interface OutputObject {
    shieldFee: bigint;
    unshieldFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistryChangeEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryChangeEvent {
  export type InputTuple = [treasury: AddressLike];
  export type OutputTuple = [treasury: string];
  export interface OutputObject {
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenVault extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: TokenVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addVector: TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;

  adjustByRatio: TypedContractMethod<
    [
      quotient: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish
    ],
    [bigint],
    "view"
  >;

  changeFee: TypedContractMethod<
    [_shieldFee: BigNumberish, _unshieldFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRegistry: TypedContractMethod<
    [_registry: AddressLike],
    [void],
    "nonpayable"
  >;

  changeTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  checkSafetyVectors: TypedContractMethod<[], [void], "nonpayable">;

  getBalances: TypedContractMethod<
    [token: TokenDataStruct],
    [[bigint, bigint]],
    "view"
  >;

  getFee: TypedContractMethod<
    [_amount: BigNumberish, _isInclusive: boolean, _feeBP: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getTokenData: TypedContractMethod<
    [_tokenID: BytesLike],
    [TokenDataStructOutput],
    "view"
  >;

  getTokenID: TypedContractMethod<
    [_tokenData: TokenDataStruct],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _treasury: AddressLike,
      _registry: AddressLike,
      _owner: AddressLike,
      _shieldFee: BigNumberish,
      _unshieldFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  internalBalances: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  removeVector: TypedContractMethod<
    [vector: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safetyVector: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  shieldFee: TypedContractMethod<[], [bigint], "view">;

  storeTokenData: TypedContractMethod<
    [_tokenData: TokenDataStruct],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenIDMapping: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint] & {
        tokenType: bigint;
        tokenAddress: string;
        tokenSubID: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferTokenIn: TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish, _token: TokenDataStruct],
    [[bigint, bigint]],
    "nonpayable"
  >;

  transferTokenOut: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _token: TokenDataStruct],
    [bigint],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  unshieldFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addVector"
  ): TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adjustByRatio"
  ): TypedContractMethod<
    [
      quotient: BigNumberish,
      numerator: BigNumberish,
      denominator: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeFee"
  ): TypedContractMethod<
    [_shieldFee: BigNumberish, _unshieldFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRegistry"
  ): TypedContractMethod<[_registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkSafetyVectors"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<[token: TokenDataStruct], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [_amount: BigNumberish, _isInclusive: boolean, _feeBP: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenData"
  ): TypedContractMethod<
    [_tokenID: BytesLike],
    [TokenDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenID"
  ): TypedContractMethod<[_tokenData: TokenDataStruct], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _treasury: AddressLike,
      _registry: AddressLike,
      _owner: AddressLike,
      _shieldFee: BigNumberish,
      _unshieldFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "internalBalances"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeVector"
  ): TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safetyVector"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "shieldFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "storeTokenData"
  ): TypedContractMethod<[_tokenData: TokenDataStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenIDMapping"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, string, bigint] & {
        tokenType: bigint;
        tokenAddress: string;
        tokenSubID: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferTokenIn"
  ): TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish, _token: TokenDataStruct],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferTokenOut"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish, _token: TokenDataStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unshieldFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "FeeChange"
  ): TypedContractEvent<
    FeeChangeEvent.InputTuple,
    FeeChangeEvent.OutputTuple,
    FeeChangeEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RegistryChange"
  ): TypedContractEvent<
    RegistryChangeEvent.InputTuple,
    RegistryChangeEvent.OutputTuple,
    RegistryChangeEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryChange"
  ): TypedContractEvent<
    TreasuryChangeEvent.InputTuple,
    TreasuryChangeEvent.OutputTuple,
    TreasuryChangeEvent.OutputObject
  >;

  filters: {
    "FeeChange(uint256,uint256)": TypedContractEvent<
      FeeChangeEvent.InputTuple,
      FeeChangeEvent.OutputTuple,
      FeeChangeEvent.OutputObject
    >;
    FeeChange: TypedContractEvent<
      FeeChangeEvent.InputTuple,
      FeeChangeEvent.OutputTuple,
      FeeChangeEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RegistryChange(address)": TypedContractEvent<
      RegistryChangeEvent.InputTuple,
      RegistryChangeEvent.OutputTuple,
      RegistryChangeEvent.OutputObject
    >;
    RegistryChange: TypedContractEvent<
      RegistryChangeEvent.InputTuple,
      RegistryChangeEvent.OutputTuple,
      RegistryChangeEvent.OutputObject
    >;

    "TreasuryChange(address)": TypedContractEvent<
      TreasuryChangeEvent.InputTuple,
      TreasuryChangeEvent.OutputTuple,
      TreasuryChangeEvent.OutputObject
    >;
    TreasuryChange: TypedContractEvent<
      TreasuryChangeEvent.InputTuple,
      TreasuryChangeEvent.OutputTuple,
      TreasuryChangeEvent.OutputObject
    >;
  };
}
