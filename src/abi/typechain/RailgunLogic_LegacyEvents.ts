/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CommitmentCiphertextStruct = {
  ciphertext: [BigNumberish, BigNumberish, BigNumberish, BigNumberish];
  ephemeralKeys: [BigNumberish, BigNumberish];
  memo: BigNumberish[];
};

export type CommitmentCiphertextStructOutput = [
  ciphertext: [bigint, bigint, bigint, bigint],
  ephemeralKeys: [bigint, bigint],
  memo: bigint[]
] & {
  ciphertext: [bigint, bigint, bigint, bigint];
  ephemeralKeys: [bigint, bigint];
  memo: bigint[];
};

export type TokenDataStruct = {
  tokenType: BigNumberish;
  tokenAddress: AddressLike;
  tokenSubID: BigNumberish;
};

export type TokenDataStructOutput = [
  tokenType: bigint,
  tokenAddress: string,
  tokenSubID: bigint
] & { tokenType: bigint; tokenAddress: string; tokenSubID: bigint };

export type CommitmentPreimageStruct = {
  npk: BigNumberish;
  token: TokenDataStruct;
  value: BigNumberish;
};

export type CommitmentPreimageStructOutput = [
  npk: bigint,
  token: TokenDataStructOutput,
  value: bigint
] & { npk: bigint; token: TokenDataStructOutput; value: bigint };

export type G1PointStruct = { x: BigNumberish; y: BigNumberish };

export type G1PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type G2PointStruct = {
  x: [BigNumberish, BigNumberish];
  y: [BigNumberish, BigNumberish];
};

export type G2PointStructOutput = [x: [bigint, bigint], y: [bigint, bigint]] & {
  x: [bigint, bigint];
  y: [bigint, bigint];
};

export type VerifyingKeyStruct = {
  artifactsIPFSHash: string;
  alpha1: G1PointStruct;
  beta2: G2PointStruct;
  gamma2: G2PointStruct;
  delta2: G2PointStruct;
  ic: G1PointStruct[];
};

export type VerifyingKeyStructOutput = [
  artifactsIPFSHash: string,
  alpha1: G1PointStructOutput,
  beta2: G2PointStructOutput,
  gamma2: G2PointStructOutput,
  delta2: G2PointStructOutput,
  ic: G1PointStructOutput[]
] & {
  artifactsIPFSHash: string;
  alpha1: G1PointStructOutput;
  beta2: G2PointStructOutput;
  gamma2: G2PointStructOutput;
  delta2: G2PointStructOutput;
  ic: G1PointStructOutput[];
};

export type BoundParamsStruct = {
  treeNumber: BigNumberish;
  withdraw: BigNumberish;
  adaptContract: AddressLike;
  adaptParams: BytesLike;
  commitmentCiphertext: CommitmentCiphertextStruct[];
};

export type BoundParamsStructOutput = [
  treeNumber: bigint,
  withdraw: bigint,
  adaptContract: string,
  adaptParams: string,
  commitmentCiphertext: CommitmentCiphertextStructOutput[]
] & {
  treeNumber: bigint;
  withdraw: bigint;
  adaptContract: string;
  adaptParams: string;
  commitmentCiphertext: CommitmentCiphertextStructOutput[];
};

export type SnarkProofStruct = {
  a: G1PointStruct;
  b: G2PointStruct;
  c: G1PointStruct;
};

export type SnarkProofStructOutput = [
  a: G1PointStructOutput,
  b: G2PointStructOutput,
  c: G1PointStructOutput
] & { a: G1PointStructOutput; b: G2PointStructOutput; c: G1PointStructOutput };

export type TransactionStruct = {
  proof: SnarkProofStruct;
  merkleRoot: BigNumberish;
  nullifiers: BigNumberish[];
  commitments: BigNumberish[];
  boundParams: BoundParamsStruct;
  withdrawPreimage: CommitmentPreimageStruct;
  overrideOutput: AddressLike;
};

export type TransactionStructOutput = [
  proof: SnarkProofStructOutput,
  merkleRoot: bigint,
  nullifiers: bigint[],
  commitments: bigint[],
  boundParams: BoundParamsStructOutput,
  withdrawPreimage: CommitmentPreimageStructOutput,
  overrideOutput: string
] & {
  proof: SnarkProofStructOutput;
  merkleRoot: bigint;
  nullifiers: bigint[];
  commitments: bigint[];
  boundParams: BoundParamsStructOutput;
  withdrawPreimage: CommitmentPreimageStructOutput;
  overrideOutput: string;
};

export interface RailgunLogic_LegacyEventsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SNARK_BYPASS"
      | "ZERO_VALUE"
      | "addToBlacklist"
      | "addVector"
      | "changeFee"
      | "changeTreasury"
      | "checkSafetyVectors"
      | "depositFee"
      | "generateDeposit"
      | "getFee"
      | "getTokenField"
      | "getVerificationKey"
      | "hashBoundParams"
      | "hashCommitment"
      | "hashLeftRight"
      | "initializeRailgunLogic"
      | "merkleRoot"
      | "nftFee"
      | "nullifiers"
      | "owner"
      | "removeFromBlacklist"
      | "removeVector"
      | "renounceOwnership"
      | "rootHistory"
      | "setVerificationKey"
      | "snarkSafetyVector"
      | "tokenBlacklist"
      | "transact"
      | "transferOwnership"
      | "treasury"
      | "treeNumber"
      | "verify"
      | "verifyProof"
      | "withdrawFee"
      | "zeros"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddToBlacklist"
      | "CommitmentBatch"
      | "FeeChange"
      | "GeneratedCommitmentBatch"
      | "Nullifiers"
      | "OwnershipTransferred"
      | "RemoveFromBlacklist"
      | "TreasuryChange"
      | "VerifyingKeySet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SNARK_BYPASS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSafetyVectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateDeposit",
    values: [CommitmentPreimageStruct[], [BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenField",
    values: [TokenDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerificationKey",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashBoundParams",
    values: [BoundParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashCommitment",
    values: [CommitmentPreimageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRailgunLogic",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifiers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromBlacklist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerificationKey",
    values: [BigNumberish, BigNumberish, VerifyingKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "snarkSafetyVector",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBlacklist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transact",
    values: [TransactionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treeNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [TransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [VerifyingKeyStruct, SnarkProofStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "SNARK_BYPASS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVector", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSafetyVectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerificationKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashBoundParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRailgunLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nullifiers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snarkSafetyVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treeNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;
}

export namespace AddToBlacklistEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitmentBatchEvent {
  export type InputTuple = [
    treeNumber: BigNumberish,
    startPosition: BigNumberish,
    hash: BigNumberish[],
    ciphertext: CommitmentCiphertextStruct[]
  ];
  export type OutputTuple = [
    treeNumber: bigint,
    startPosition: bigint,
    hash: bigint[],
    ciphertext: CommitmentCiphertextStructOutput[]
  ];
  export interface OutputObject {
    treeNumber: bigint;
    startPosition: bigint;
    hash: bigint[];
    ciphertext: CommitmentCiphertextStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeChangeEvent {
  export type InputTuple = [
    depositFee: BigNumberish,
    withdrawFee: BigNumberish,
    nftFee: BigNumberish
  ];
  export type OutputTuple = [
    depositFee: bigint,
    withdrawFee: bigint,
    nftFee: bigint
  ];
  export interface OutputObject {
    depositFee: bigint;
    withdrawFee: bigint;
    nftFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GeneratedCommitmentBatchEvent {
  export type InputTuple = [
    treeNumber: BigNumberish,
    startPosition: BigNumberish,
    commitments: CommitmentPreimageStruct[],
    encryptedRandom: [BigNumberish, BigNumberish][]
  ];
  export type OutputTuple = [
    treeNumber: bigint,
    startPosition: bigint,
    commitments: CommitmentPreimageStructOutput[],
    encryptedRandom: [bigint, bigint][]
  ];
  export interface OutputObject {
    treeNumber: bigint;
    startPosition: bigint;
    commitments: CommitmentPreimageStructOutput[];
    encryptedRandom: [bigint, bigint][];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NullifiersEvent {
  export type InputTuple = [
    treeNumber: BigNumberish,
    nullifier: BigNumberish[]
  ];
  export type OutputTuple = [treeNumber: bigint, nullifier: bigint[]];
  export interface OutputObject {
    treeNumber: bigint;
    nullifier: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveFromBlacklistEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryChangeEvent {
  export type InputTuple = [treasury: AddressLike];
  export type OutputTuple = [treasury: string];
  export interface OutputObject {
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifyingKeySetEvent {
  export type InputTuple = [
    nullifiers: BigNumberish,
    commitments: BigNumberish,
    verifyingKey: VerifyingKeyStruct
  ];
  export type OutputTuple = [
    nullifiers: bigint,
    commitments: bigint,
    verifyingKey: VerifyingKeyStructOutput
  ];
  export interface OutputObject {
    nullifiers: bigint;
    commitments: bigint;
    verifyingKey: VerifyingKeyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RailgunLogic_LegacyEvents extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: RailgunLogic_LegacyEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SNARK_BYPASS: TypedContractMethod<[], [string], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  addToBlacklist: TypedContractMethod<
    [_tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  addVector: TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;

  changeFee: TypedContractMethod<
    [
      _depositFee: BigNumberish,
      _withdrawFee: BigNumberish,
      _nftFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  changeTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  checkSafetyVectors: TypedContractMethod<[], [void], "nonpayable">;

  depositFee: TypedContractMethod<[], [bigint], "view">;

  generateDeposit: TypedContractMethod<
    [
      _notes: CommitmentPreimageStruct[],
      _encryptedRandom: [BigNumberish, BigNumberish][]
    ],
    [void],
    "nonpayable"
  >;

  getFee: TypedContractMethod<
    [_amount: BigNumberish, _isInclusive: boolean, _feeBP: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getTokenField: TypedContractMethod<
    [_tokenData: TokenDataStruct],
    [bigint],
    "view"
  >;

  getVerificationKey: TypedContractMethod<
    [_nullifiers: BigNumberish, _commitments: BigNumberish],
    [VerifyingKeyStructOutput],
    "view"
  >;

  hashBoundParams: TypedContractMethod<
    [_boundParams: BoundParamsStruct],
    [bigint],
    "view"
  >;

  hashCommitment: TypedContractMethod<
    [_commitmentPreimage: CommitmentPreimageStruct],
    [bigint],
    "view"
  >;

  hashLeftRight: TypedContractMethod<
    [_left: BigNumberish, _right: BigNumberish],
    [bigint],
    "view"
  >;

  initializeRailgunLogic: TypedContractMethod<
    [
      _treasury: AddressLike,
      _depositFee: BigNumberish,
      _withdrawFee: BigNumberish,
      _nftFee: BigNumberish,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  merkleRoot: TypedContractMethod<[], [bigint], "view">;

  nftFee: TypedContractMethod<[], [bigint], "view">;

  nullifiers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeFromBlacklist: TypedContractMethod<
    [_tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  removeVector: TypedContractMethod<
    [vector: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rootHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  setVerificationKey: TypedContractMethod<
    [
      _nullifiers: BigNumberish,
      _commitments: BigNumberish,
      _verifyingKey: VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;

  snarkSafetyVector: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  tokenBlacklist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transact: TypedContractMethod<
    [_transactions: TransactionStruct[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  treeNumber: TypedContractMethod<[], [bigint], "view">;

  verify: TypedContractMethod<
    [_transaction: TransactionStruct],
    [boolean],
    "view"
  >;

  verifyProof: TypedContractMethod<
    [
      _verifyingKey: VerifyingKeyStruct,
      _proof: SnarkProofStruct,
      _inputs: BigNumberish[]
    ],
    [boolean],
    "view"
  >;

  withdrawFee: TypedContractMethod<[], [bigint], "view">;

  zeros: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SNARK_BYPASS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addToBlacklist"
  ): TypedContractMethod<[_tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVector"
  ): TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeFee"
  ): TypedContractMethod<
    [
      _depositFee: BigNumberish,
      _withdrawFee: BigNumberish,
      _nftFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkSafetyVectors"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateDeposit"
  ): TypedContractMethod<
    [
      _notes: CommitmentPreimageStruct[],
      _encryptedRandom: [BigNumberish, BigNumberish][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [_amount: BigNumberish, _isInclusive: boolean, _feeBP: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenField"
  ): TypedContractMethod<[_tokenData: TokenDataStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVerificationKey"
  ): TypedContractMethod<
    [_nullifiers: BigNumberish, _commitments: BigNumberish],
    [VerifyingKeyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashBoundParams"
  ): TypedContractMethod<[_boundParams: BoundParamsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "hashCommitment"
  ): TypedContractMethod<
    [_commitmentPreimage: CommitmentPreimageStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [_left: BigNumberish, _right: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeRailgunLogic"
  ): TypedContractMethod<
    [
      _treasury: AddressLike,
      _depositFee: BigNumberish,
      _withdrawFee: BigNumberish,
      _nftFee: BigNumberish,
      _owner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifiers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFromBlacklist"
  ): TypedContractMethod<[_tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVector"
  ): TypedContractMethod<[vector: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rootHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVerificationKey"
  ): TypedContractMethod<
    [
      _nullifiers: BigNumberish,
      _commitments: BigNumberish,
      _verifyingKey: VerifyingKeyStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "snarkSafetyVector"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenBlacklist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transact"
  ): TypedContractMethod<
    [_transactions: TransactionStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "treeNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<[_transaction: TransactionStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<
    [
      _verifyingKey: VerifyingKeyStruct,
      _proof: SnarkProofStruct,
      _inputs: BigNumberish[]
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "zeros"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "AddToBlacklist"
  ): TypedContractEvent<
    AddToBlacklistEvent.InputTuple,
    AddToBlacklistEvent.OutputTuple,
    AddToBlacklistEvent.OutputObject
  >;
  getEvent(
    key: "CommitmentBatch"
  ): TypedContractEvent<
    CommitmentBatchEvent.InputTuple,
    CommitmentBatchEvent.OutputTuple,
    CommitmentBatchEvent.OutputObject
  >;
  getEvent(
    key: "FeeChange"
  ): TypedContractEvent<
    FeeChangeEvent.InputTuple,
    FeeChangeEvent.OutputTuple,
    FeeChangeEvent.OutputObject
  >;
  getEvent(
    key: "GeneratedCommitmentBatch"
  ): TypedContractEvent<
    GeneratedCommitmentBatchEvent.InputTuple,
    GeneratedCommitmentBatchEvent.OutputTuple,
    GeneratedCommitmentBatchEvent.OutputObject
  >;
  getEvent(
    key: "Nullifiers"
  ): TypedContractEvent<
    NullifiersEvent.InputTuple,
    NullifiersEvent.OutputTuple,
    NullifiersEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveFromBlacklist"
  ): TypedContractEvent<
    RemoveFromBlacklistEvent.InputTuple,
    RemoveFromBlacklistEvent.OutputTuple,
    RemoveFromBlacklistEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryChange"
  ): TypedContractEvent<
    TreasuryChangeEvent.InputTuple,
    TreasuryChangeEvent.OutputTuple,
    TreasuryChangeEvent.OutputObject
  >;
  getEvent(
    key: "VerifyingKeySet"
  ): TypedContractEvent<
    VerifyingKeySetEvent.InputTuple,
    VerifyingKeySetEvent.OutputTuple,
    VerifyingKeySetEvent.OutputObject
  >;

  filters: {
    "AddToBlacklist(address)": TypedContractEvent<
      AddToBlacklistEvent.InputTuple,
      AddToBlacklistEvent.OutputTuple,
      AddToBlacklistEvent.OutputObject
    >;
    AddToBlacklist: TypedContractEvent<
      AddToBlacklistEvent.InputTuple,
      AddToBlacklistEvent.OutputTuple,
      AddToBlacklistEvent.OutputObject
    >;

    "CommitmentBatch(uint256,uint256,uint256[],tuple[])": TypedContractEvent<
      CommitmentBatchEvent.InputTuple,
      CommitmentBatchEvent.OutputTuple,
      CommitmentBatchEvent.OutputObject
    >;
    CommitmentBatch: TypedContractEvent<
      CommitmentBatchEvent.InputTuple,
      CommitmentBatchEvent.OutputTuple,
      CommitmentBatchEvent.OutputObject
    >;

    "FeeChange(uint256,uint256,uint256)": TypedContractEvent<
      FeeChangeEvent.InputTuple,
      FeeChangeEvent.OutputTuple,
      FeeChangeEvent.OutputObject
    >;
    FeeChange: TypedContractEvent<
      FeeChangeEvent.InputTuple,
      FeeChangeEvent.OutputTuple,
      FeeChangeEvent.OutputObject
    >;

    "GeneratedCommitmentBatch(uint256,uint256,tuple[],uint256[2][])": TypedContractEvent<
      GeneratedCommitmentBatchEvent.InputTuple,
      GeneratedCommitmentBatchEvent.OutputTuple,
      GeneratedCommitmentBatchEvent.OutputObject
    >;
    GeneratedCommitmentBatch: TypedContractEvent<
      GeneratedCommitmentBatchEvent.InputTuple,
      GeneratedCommitmentBatchEvent.OutputTuple,
      GeneratedCommitmentBatchEvent.OutputObject
    >;

    "Nullifiers(uint256,uint256[])": TypedContractEvent<
      NullifiersEvent.InputTuple,
      NullifiersEvent.OutputTuple,
      NullifiersEvent.OutputObject
    >;
    Nullifiers: TypedContractEvent<
      NullifiersEvent.InputTuple,
      NullifiersEvent.OutputTuple,
      NullifiersEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveFromBlacklist(address)": TypedContractEvent<
      RemoveFromBlacklistEvent.InputTuple,
      RemoveFromBlacklistEvent.OutputTuple,
      RemoveFromBlacklistEvent.OutputObject
    >;
    RemoveFromBlacklist: TypedContractEvent<
      RemoveFromBlacklistEvent.InputTuple,
      RemoveFromBlacklistEvent.OutputTuple,
      RemoveFromBlacklistEvent.OutputObject
    >;

    "TreasuryChange(address)": TypedContractEvent<
      TreasuryChangeEvent.InputTuple,
      TreasuryChangeEvent.OutputTuple,
      TreasuryChangeEvent.OutputObject
    >;
    TreasuryChange: TypedContractEvent<
      TreasuryChangeEvent.InputTuple,
      TreasuryChangeEvent.OutputTuple,
      TreasuryChangeEvent.OutputObject
    >;

    "VerifyingKeySet(uint256,uint256,tuple)": TypedContractEvent<
      VerifyingKeySetEvent.InputTuple,
      VerifyingKeySetEvent.OutputTuple,
      VerifyingKeySetEvent.OutputObject
    >;
    VerifyingKeySet: TypedContractEvent<
      VerifyingKeySetEvent.InputTuple,
      VerifyingKeySetEvent.OutputTuple,
      VerifyingKeySetEvent.OutputObject
    >;
  };
}
