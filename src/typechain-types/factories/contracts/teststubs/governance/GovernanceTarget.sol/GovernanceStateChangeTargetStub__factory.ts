/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  GovernanceStateChangeTargetStub,
  GovernanceStateChangeTargetStubInterface,
} from "../../../../../contracts/teststubs/governance/GovernanceTarget.sol/GovernanceStateChangeTargetStub";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeing",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_newGreeting",
        type: "string",
      },
    ],
    name: "changeGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "greeting",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "willRevert",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105e23803806105e283398101604081905261002f916100f8565b8051610042906000906020840190610049565b5050610202565b828054610055906101c7565b90600052602060002090601f01602090048101928261007757600085556100bd565b82601f1061009057805160ff19168380011785556100bd565b828001600101855582156100bd579182015b828111156100bd5782518255916020019190600101906100a2565b506100c99291506100cd565b5090565b5b808211156100c957600081556001016100ce565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561010b57600080fd5b82516001600160401b038082111561012257600080fd5b818501915085601f83011261013657600080fd5b815181811115610148576101486100e2565b604051601f8201601f19908116603f01168101908382118183101715610170576101706100e2565b81604052828152888684870101111561018857600080fd5b600093505b828410156101aa578484018601518185018701529285019261018d565b828411156101bb5760008684830101525b98975050505050505050565b600181811c908216806101db57607f821691505b602082108114156101fc57634e487b7160e01b600052602260045260246000fd5b50919050565b6103d1806102116000396000f3fe6080604052600436106100385760003560e01c806373ee93b314610091578063d28c25d4146100bb578063ef690cc0146100db57600080fd5b3661008c5760405162461bcd60e51b815260206004820152601360248201527f31206973206e6f7420657175616c20746f20320000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561009d57600080fd5b506100a66100fd565b60405190151581526020015b60405180910390f35b3480156100c757600080fd5b5061008a6100d6366004610280565b610148565b3480156100e757600080fd5b506100f0610159565b6040516100b291906102f2565b60405162461bcd60e51b815260206004820152601360248201527f31206973206e6f7420657175616c20746f2032000000000000000000000000006044820152600090606401610081565b610154600083836101e7565b505050565b6000805461016690610347565b80601f016020809104026020016040519081016040528092919081815260200182805461019290610347565b80156101df5780601f106101b4576101008083540402835291602001916101df565b820191906000526020600020905b8154815290600101906020018083116101c257829003601f168201915b505050505081565b8280546101f390610347565b90600052602060002090601f016020900481019282610215576000855561025b565b82601f1061022e5782800160ff1982351617855561025b565b8280016001018555821561025b579182015b8281111561025b578235825591602001919060010190610240565b5061026792915061026b565b5090565b5b80821115610267576000815560010161026c565b6000806020838503121561029357600080fd5b823567ffffffffffffffff808211156102ab57600080fd5b818501915085601f8301126102bf57600080fd5b8135818111156102ce57600080fd5b8660208285010111156102e057600080fd5b60209290920196919550909350505050565b600060208083528351808285015260005b8181101561031f57858101830151858201604001528201610303565b81811115610331576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c9082168061035b57607f821691505b60208210811415610395577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122073be5945af8c74d2f14ff8943036c6f3fe203e78b42a702a54327818205166e064736f6c634300080c0033";

type GovernanceStateChangeTargetStubConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceStateChangeTargetStubConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernanceStateChangeTargetStub__factory extends ContractFactory {
  constructor(...args: GovernanceStateChangeTargetStubConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _greeing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GovernanceStateChangeTargetStub> {
    return super.deploy(
      _greeing,
      overrides || {}
    ) as Promise<GovernanceStateChangeTargetStub>;
  }
  override getDeployTransaction(
    _greeing: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeing, overrides || {});
  }
  override attach(address: string): GovernanceStateChangeTargetStub {
    return super.attach(address) as GovernanceStateChangeTargetStub;
  }
  override connect(signer: Signer): GovernanceStateChangeTargetStub__factory {
    return super.connect(signer) as GovernanceStateChangeTargetStub__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceStateChangeTargetStubInterface {
    return new utils.Interface(
      _abi
    ) as GovernanceStateChangeTargetStubInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GovernanceStateChangeTargetStub {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GovernanceStateChangeTargetStub;
  }
}
