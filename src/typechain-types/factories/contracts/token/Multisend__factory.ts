/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multisend,
  MultisendInterface,
} from "../../../contracts/token/Multisend";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Multisend.Transfer[]",
        name: "transfers",
        type: "tuple[]",
      },
    ],
    name: "multisend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638f9df10114610030575b600080fd5b61004361003e36600461041d565b610045565b005b60005b818110156100d1576100bf33848484818110610066576100666104a5565b61007c92602060409092020190810191506104bb565b85858581811061008e5761008e6104a5565b905060400201602001358773ffffffffffffffffffffffffffffffffffffffff166100d7909392919063ffffffff16565b6100ca6001826104d8565b9050610048565b50505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100d1928792916000916101aa918516908490610244565b80519091501561023f57808060200190518101906101c891906104ff565b61023f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b505050565b6060610253848460008561025d565b90505b9392505050565b6060824710156102d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610236565b73ffffffffffffffffffffffffffffffffffffffff85163b6103395760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610236565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516103629190610545565b60006040518083038185875af1925050503d806000811461039f576040519150601f19603f3d011682016040523d82523d6000602084013e6103a4565b606091505b50915091506103b48282866103bf565b979650505050505050565b606083156103ce575081610256565b8251156103de5782518084602001fd5b8160405162461bcd60e51b81526004016102369190610561565b73ffffffffffffffffffffffffffffffffffffffff8116811461041a57600080fd5b50565b60008060006040848603121561043257600080fd5b833561043d816103f8565b9250602084013567ffffffffffffffff8082111561045a57600080fd5b818601915086601f83011261046e57600080fd5b81358181111561047d57600080fd5b8760208260061b850101111561049257600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156104cd57600080fd5b8135610256816103f8565b808201808211156104f957634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561051157600080fd5b8151801515811461025657600080fd5b60005b8381101561053c578181015183820152602001610524565b50506000910152565b60008251610557818460208701610521565b9190910192915050565b6020815260008251806020840152610580816040850160208701610521565b601f01601f1916919091016040019291505056fea2646970667358221220e5dd1fd11feb141c991555822a5c92462dd1cc37b0a203e836d97934f3ad784d64736f6c63430008110033";

type MultisendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultisendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multisend__factory extends ContractFactory {
  constructor(...args: MultisendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multisend> {
    return super.deploy(overrides || {}) as Promise<Multisend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multisend {
    return super.attach(address) as Multisend;
  }
  override connect(signer: Signer): Multisend__factory {
    return super.connect(signer) as Multisend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultisendInterface {
    return new utils.Interface(_abi) as MultisendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multisend {
    return new Contract(address, _abi, signerOrProvider) as Multisend;
  }
}
