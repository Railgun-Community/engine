/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../common';

export type G1PointStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
};

export type G1PointStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type G2PointStruct = {
  x: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  y: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
};

export type G2PointStructOutput = [[BigNumber, BigNumber], [BigNumber, BigNumber]] & {
  x: [BigNumber, BigNumber];
  y: [BigNumber, BigNumber];
};

export type SnarkProofStruct = {
  a: G1PointStruct;
  b: G2PointStruct;
  c: G1PointStruct;
};

export type SnarkProofStructOutput = [
  G1PointStructOutput,
  G2PointStructOutput,
  G1PointStructOutput,
] & { a: G1PointStructOutput; b: G2PointStructOutput; c: G1PointStructOutput };

export type CommitmentCiphertextStruct = {
  ciphertext: [
    PromiseOrValue<BytesLike>,
    PromiseOrValue<BytesLike>,
    PromiseOrValue<BytesLike>,
    PromiseOrValue<BytesLike>,
  ];
  blindedSenderViewingKey: PromiseOrValue<BytesLike>;
  blindedReceiverViewingKey: PromiseOrValue<BytesLike>;
  annotationData: PromiseOrValue<BytesLike>;
  memo: PromiseOrValue<BytesLike>;
};

export type CommitmentCiphertextStructOutput = [
  [string, string, string, string],
  string,
  string,
  string,
  string,
] & {
  ciphertext: [string, string, string, string];
  blindedSenderViewingKey: string;
  blindedReceiverViewingKey: string;
  annotationData: string;
  memo: string;
};

export type BoundParamsStruct = {
  treeNumber: PromiseOrValue<BigNumberish>;
  minGasPrice: PromiseOrValue<BigNumberish>;
  unshield: PromiseOrValue<BigNumberish>;
  chainID: PromiseOrValue<BigNumberish>;
  adaptContract: PromiseOrValue<string>;
  adaptParams: PromiseOrValue<BytesLike>;
  commitmentCiphertext: CommitmentCiphertextStruct[];
};

export type BoundParamsStructOutput = [
  number,
  BigNumber,
  number,
  BigNumber,
  string,
  string,
  CommitmentCiphertextStructOutput[],
] & {
  treeNumber: number;
  minGasPrice: BigNumber;
  unshield: number;
  chainID: BigNumber;
  adaptContract: string;
  adaptParams: string;
  commitmentCiphertext: CommitmentCiphertextStructOutput[];
};

export type TokenDataStruct = {
  tokenType: PromiseOrValue<BigNumberish>;
  tokenAddress: PromiseOrValue<string>;
  tokenSubID: PromiseOrValue<BigNumberish>;
};

export type TokenDataStructOutput = [number, string, BigNumber] & {
  tokenType: number;
  tokenAddress: string;
  tokenSubID: BigNumber;
};

export type CommitmentPreimageStruct = {
  npk: PromiseOrValue<BytesLike>;
  token: TokenDataStruct;
  value: PromiseOrValue<BigNumberish>;
};

export type CommitmentPreimageStructOutput = [string, TokenDataStructOutput, BigNumber] & {
  npk: string;
  token: TokenDataStructOutput;
  value: BigNumber;
};

export type TransactionStruct = {
  proof: SnarkProofStruct;
  merkleRoot: PromiseOrValue<BytesLike>;
  nullifiers: PromiseOrValue<BytesLike>[];
  commitments: PromiseOrValue<BytesLike>[];
  boundParams: BoundParamsStruct;
  unshieldPreimage: CommitmentPreimageStruct;
};

export type TransactionStructOutput = [
  SnarkProofStructOutput,
  string,
  string[],
  string[],
  BoundParamsStructOutput,
  CommitmentPreimageStructOutput,
] & {
  proof: SnarkProofStructOutput;
  merkleRoot: string;
  nullifiers: string[];
  commitments: string[];
  boundParams: BoundParamsStructOutput;
  unshieldPreimage: CommitmentPreimageStructOutput;
};

export type ShieldCiphertextStruct = {
  encryptedBundle: [
    PromiseOrValue<BytesLike>,
    PromiseOrValue<BytesLike>,
    PromiseOrValue<BytesLike>,
  ];
  shieldKey: PromiseOrValue<BytesLike>;
};

export type ShieldCiphertextStructOutput = [[string, string, string], string] & {
  encryptedBundle: [string, string, string];
  shieldKey: string;
};

export type ShieldRequestStruct = {
  preimage: CommitmentPreimageStruct;
  ciphertext: ShieldCiphertextStruct;
};

export type ShieldRequestStructOutput = [
  CommitmentPreimageStructOutput,
  ShieldCiphertextStructOutput,
] & {
  preimage: CommitmentPreimageStructOutput;
  ciphertext: ShieldCiphertextStructOutput;
};

export declare namespace RelayAdapt {
  export type CallStruct = {
    to: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type CallStructOutput = [string, string, BigNumber] & {
    to: string;
    data: string;
    value: BigNumber;
  };

  export type ActionDataStruct = {
    random: PromiseOrValue<BytesLike>;
    requireSuccess: PromiseOrValue<boolean>;
    minGasLimit: PromiseOrValue<BigNumberish>;
    calls: RelayAdapt.CallStruct[];
  };

  export type ActionDataStructOutput = [
    string,
    boolean,
    BigNumber,
    RelayAdapt.CallStructOutput[],
  ] & {
    random: string;
    requireSuccess: boolean;
    minGasLimit: BigNumber;
    calls: RelayAdapt.CallStructOutput[];
  };

  export type TokenTransferStruct = {
    token: TokenDataStruct;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type TokenTransferStructOutput = [TokenDataStructOutput, string, BigNumber] & {
    token: TokenDataStructOutput;
    to: string;
    value: BigNumber;
  };
}

export interface RelayAdaptInterface extends utils.Interface {
  functions: {
    'getAdaptParams((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes32,bytes32[],bytes32[],(uint16,uint72,uint8,uint64,address,bytes32,(bytes32[4],bytes32,bytes32,bytes,bytes)[]),(bytes32,(uint8,address,uint256),uint120))[],(bytes31,bool,uint256,(address,bytes,uint256)[]))': FunctionFragment;
    'multicall(bool,(address,bytes,uint256)[])': FunctionFragment;
    'railgun()': FunctionFragment;
    'relay((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),bytes32,bytes32[],bytes32[],(uint16,uint72,uint8,uint64,address,bytes32,(bytes32[4],bytes32,bytes32,bytes,bytes)[]),(bytes32,(uint8,address,uint256),uint120))[],(bytes31,bool,uint256,(address,bytes,uint256)[]))': FunctionFragment;
    'shield(((bytes32,(uint8,address,uint256),uint120),(bytes32[3],bytes32))[])': FunctionFragment;
    'transfer(((uint8,address,uint256),address,uint256)[])': FunctionFragment;
    'unwrapBase(uint256)': FunctionFragment;
    'wBase()': FunctionFragment;
    'wrapBase(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getAdaptParams'
      | 'multicall'
      | 'railgun'
      | 'relay'
      | 'shield'
      | 'transfer'
      | 'unwrapBase'
      | 'wBase'
      | 'wrapBase',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getAdaptParams',
    values: [TransactionStruct[], RelayAdapt.ActionDataStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'multicall',
    values: [PromiseOrValue<boolean>, RelayAdapt.CallStruct[]],
  ): string;
  encodeFunctionData(functionFragment: 'railgun', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'relay',
    values: [TransactionStruct[], RelayAdapt.ActionDataStruct],
  ): string;
  encodeFunctionData(functionFragment: 'shield', values: [ShieldRequestStruct[]]): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [RelayAdapt.TokenTransferStruct[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'unwrapBase',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'wBase', values?: undefined): string;
  encodeFunctionData(functionFragment: 'wrapBase', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'getAdaptParams', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'multicall', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'railgun', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shield', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unwrapBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapBase', data: BytesLike): Result;

  events: {};
}

export interface RelayAdapt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayAdaptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAdaptParams(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    multicall(
      _requireSuccess: PromiseOrValue<boolean>,
      _calls: RelayAdapt.CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    railgun(overrides?: CallOverrides): Promise<[string]>;

    relay(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    shield(
      _shieldRequests: ShieldRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transfer(
      _transfers: RelayAdapt.TokenTransferStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unwrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    wBase(overrides?: CallOverrides): Promise<[string]>;

    wrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  getAdaptParams(
    _transactions: TransactionStruct[],
    _actionData: RelayAdapt.ActionDataStruct,
    overrides?: CallOverrides,
  ): Promise<string>;

  multicall(
    _requireSuccess: PromiseOrValue<boolean>,
    _calls: RelayAdapt.CallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  railgun(overrides?: CallOverrides): Promise<string>;

  relay(
    _transactions: TransactionStruct[],
    _actionData: RelayAdapt.ActionDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  shield(
    _shieldRequests: ShieldRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transfer(
    _transfers: RelayAdapt.TokenTransferStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unwrapBase(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  wBase(overrides?: CallOverrides): Promise<string>;

  wrapBase(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    getAdaptParams(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: CallOverrides,
    ): Promise<string>;

    multicall(
      _requireSuccess: PromiseOrValue<boolean>,
      _calls: RelayAdapt.CallStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    railgun(overrides?: CallOverrides): Promise<string>;

    relay(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: CallOverrides,
    ): Promise<void>;

    shield(_shieldRequests: ShieldRequestStruct[], overrides?: CallOverrides): Promise<void>;

    transfer(
      _transfers: RelayAdapt.TokenTransferStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    unwrapBase(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    wBase(overrides?: CallOverrides): Promise<string>;

    wrapBase(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAdaptParams(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    multicall(
      _requireSuccess: PromiseOrValue<boolean>,
      _calls: RelayAdapt.CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    railgun(overrides?: CallOverrides): Promise<BigNumber>;

    relay(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    shield(
      _shieldRequests: ShieldRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transfer(
      _transfers: RelayAdapt.TokenTransferStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unwrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    wBase(overrides?: CallOverrides): Promise<BigNumber>;

    wrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAdaptParams(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    multicall(
      _requireSuccess: PromiseOrValue<boolean>,
      _calls: RelayAdapt.CallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    railgun(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relay(
      _transactions: TransactionStruct[],
      _actionData: RelayAdapt.ActionDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    shield(
      _shieldRequests: ShieldRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transfer(
      _transfers: RelayAdapt.TokenTransferStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unwrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    wBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapBase(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
