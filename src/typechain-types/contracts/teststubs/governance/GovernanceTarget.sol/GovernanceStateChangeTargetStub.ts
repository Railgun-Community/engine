/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common';

export interface GovernanceStateChangeTargetStubInterface extends utils.Interface {
  functions: {
    'changeGreeting(string)': FunctionFragment;
    'greeting()': FunctionFragment;
    'willRevert()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'changeGreeting' | 'greeting' | 'willRevert',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'changeGreeting', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'greeting', values?: undefined): string;
  encodeFunctionData(functionFragment: 'willRevert', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'changeGreeting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'greeting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'willRevert', data: BytesLike): Result;

  events: {};
}

export interface GovernanceStateChangeTargetStub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceStateChangeTargetStubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | Optional<number>,
    toBlock?: string | Optional<number>,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    greeting(overrides?: CallOverrides): Promise<[string]>;

    willRevert(overrides?: CallOverrides): Promise<[boolean] & { success: boolean }>;
  };

  changeGreeting(
    _newGreeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  greeting(overrides?: CallOverrides): Promise<string>;

  willRevert(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    changeGreeting(_newGreeting: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    greeting(overrides?: CallOverrides): Promise<string>;

    willRevert(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    changeGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    greeting(overrides?: CallOverrides): Promise<BigNumber>;

    willRevert(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    greeting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    willRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
