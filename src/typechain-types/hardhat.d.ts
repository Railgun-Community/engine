/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWBase__factory>;
    getContractFactory(
      name: "RelayAdapt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayAdapt__factory>;
    getContractFactory(
      name: "Delegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegator__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "Voting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voting__factory>;
    getContractFactory(
      name: "Commitments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Commitments__factory>;
    getContractFactory(
      name: "PoseidonT3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT3__factory>;
    getContractFactory(
      name: "PoseidonT4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoseidonT4__factory>;
    getContractFactory(
      name: "RailgunLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RailgunLogic__factory>;
    getContractFactory(
      name: "TokenBlacklist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBlacklist__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "PausableUpgradableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradableProxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "SimpleSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleSwap__factory>;
    getContractFactory(
      name: "GovernanceStateChangeTargetStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceStateChangeTargetStub__factory>;
    getContractFactory(
      name: "GovernanceTargetAlphaStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceTargetAlphaStub__factory>;
    getContractFactory(
      name: "GovernanceTargetConstructorArgumentStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceTargetConstructorArgumentStub__factory>;
    getContractFactory(
      name: "GovernanceTargetNumberStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceTargetNumberStub__factory>;
    getContractFactory(
      name: "StakingStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingStub__factory>;
    getContractFactory(
      name: "CommitmentsStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommitmentsStub__factory>;
    getContractFactory(
      name: "RailgunLogicStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RailgunLogicStub__factory>;
    getContractFactory(
      name: "SnarkStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnarkStub__factory>;
    getContractFactory(
      name: "TokenBlacklistStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenBlacklistStub__factory>;
    getContractFactory(
      name: "VerifierStub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierStub__factory>;
    getContractFactory(
      name: "ProxyTargetStubA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyTargetStubA__factory>;
    getContractFactory(
      name: "ProxyTargetStubB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyTargetStubB__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "Distributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Distributor__factory>;
    getContractFactory(
      name: "Multisend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multisend__factory>;
    getContractFactory(
      name: "RailTokenDAOMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RailTokenDAOMintable__factory>;
    getContractFactory(
      name: "RailTokenFixedSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RailTokenFixedSupply__factory>;
    getContractFactory(
      name: "VestLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestLock__factory>;
    getContractFactory(
      name: "GovernorRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernorRewards__factory>;
    getContractFactory(
      name: "IntervalPayouts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IntervalPayouts__factory>;
    getContractFactory(
      name: "Treasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Treasury__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWBase>;
    getContractAt(
      name: "RelayAdapt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayAdapt>;
    getContractAt(
      name: "Delegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Delegator>;
    getContractAt(
      name: "Staking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "Voting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voting>;
    getContractAt(
      name: "Commitments",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Commitments>;
    getContractAt(
      name: "PoseidonT3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT3>;
    getContractAt(
      name: "PoseidonT4",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoseidonT4>;
    getContractAt(
      name: "RailgunLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RailgunLogic>;
    getContractAt(
      name: "TokenBlacklist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBlacklist>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "PausableUpgradableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradableProxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "SimpleSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleSwap>;
    getContractAt(
      name: "GovernanceStateChangeTargetStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceStateChangeTargetStub>;
    getContractAt(
      name: "GovernanceTargetAlphaStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceTargetAlphaStub>;
    getContractAt(
      name: "GovernanceTargetConstructorArgumentStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceTargetConstructorArgumentStub>;
    getContractAt(
      name: "GovernanceTargetNumberStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceTargetNumberStub>;
    getContractAt(
      name: "StakingStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingStub>;
    getContractAt(
      name: "CommitmentsStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CommitmentsStub>;
    getContractAt(
      name: "RailgunLogicStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RailgunLogicStub>;
    getContractAt(
      name: "SnarkStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnarkStub>;
    getContractAt(
      name: "TokenBlacklistStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenBlacklistStub>;
    getContractAt(
      name: "VerifierStub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierStub>;
    getContractAt(
      name: "ProxyTargetStubA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyTargetStubA>;
    getContractAt(
      name: "ProxyTargetStubB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyTargetStubB>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "Distributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Distributor>;
    getContractAt(
      name: "Multisend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multisend>;
    getContractAt(
      name: "RailTokenDAOMintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RailTokenDAOMintable>;
    getContractAt(
      name: "RailTokenFixedSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RailTokenFixedSupply>;
    getContractAt(
      name: "VestLock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestLock>;
    getContractAt(
      name: "GovernorRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernorRewards>;
    getContractAt(
      name: "IntervalPayouts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IntervalPayouts>;
    getContractAt(
      name: "Treasury",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Treasury>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
