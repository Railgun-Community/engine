/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  IntervalPayouts,
  IntervalPayoutsInterface,
} from "../../../contracts/treasury/IntervalPayouts";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Treasury",
        name: "_treasury",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_intervalLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalPayouts",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "amount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "beneficiary",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "intervalLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ready",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalPayouts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "contract Treasury",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040526000805534801561001557600080fd5b506040516107ad3803806107ad83398101604081905261003491610081565b6001600160a01b0396871660805294861660a0529290941660c05260e0526101009290925261012091909152610140526100f5565b6001600160a01b038116811461007e57600080fd5b50565b600080600080600080600060e0888a03121561009c57600080fd5b87516100a781610069565b60208901519097506100b881610069565b60408901519096506100c981610069565b80955050606088015193506080880151925060a0880151915060c0880151905092959891949750929550565b60805160a05160c05160e05161010051610120516101405161061261019b60003960008181610197015261055201526000818161011901526104f101526000818161021501526105200152600081816101be0152818161038601526104980152600081816101ee015281816102e8015261044801526000818160c80152818161035e015261047001526000818161014e015281816103ac01526104be01526106126000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806378e9792511610076578063b2cb67801161005b578063b2cb6780146101e0578063fc0c546a146101e9578063ff0b3fc51461021057600080fd5b806378e9792514610192578063aa8c217c146101b957600080fd5b806361d027b3116100a757806361d027b31461014957806363bd1d4a146101705780636defbf801461017a57600080fd5b806338af3eed146100c35780634089b17014610114575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61013b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010b565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b610178610237565b005b6101826104ed565b604051901515815260200161010b565b61013b7f000000000000000000000000000000000000000000000000000000000000000081565b61013b7f000000000000000000000000000000000000000000000000000000000000000081565b61013b60005481565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b61013b7f000000000000000000000000000000000000000000000000000000000000000081565b61023f6104ed565b6102cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f496e74657276616c5061796f7574733a205061796f7574206e6f74207265616460448201527f7900000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b60016000808282546102e191906105ac565b90915550507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661040b576040517f7b1a490900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301527f00000000000000000000000000000000000000000000000000000000000000001690637b1a4909906044015b600060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b50505050565b6040517f9db5dbe400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000060448301527f00000000000000000000000000000000000000000000000000000000000000001690639db5dbe4906064016103d7565b60007f00000000000000000000000000000000000000000000000000000000000000006000541061051e5750600090565b7f000000000000000000000000000000000000000000000000000000000000000060005461054c91906105c5565b610576907f00000000000000000000000000000000000000000000000000000000000000006105ac565b4211905090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156105bf576105bf61057d565b92915050565b80820281158282048414176105bf576105bf61057d56fea2646970667358221220a09a6f2e3e0e269012563d6d3370e346b4795cba9e464ab8dbb54c82c12694bc64736f6c63430008110033";

type IntervalPayoutsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntervalPayoutsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntervalPayouts__factory extends ContractFactory {
  constructor(...args: IntervalPayoutsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _treasury: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _intervalLength: PromiseOrValue<BigNumberish>,
    _totalPayouts: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IntervalPayouts> {
    return super.deploy(
      _treasury,
      _beneficiary,
      _token,
      _amount,
      _intervalLength,
      _totalPayouts,
      _startTime,
      overrides || {}
    ) as Promise<IntervalPayouts>;
  }
  override getDeployTransaction(
    _treasury: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _intervalLength: PromiseOrValue<BigNumberish>,
    _totalPayouts: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _treasury,
      _beneficiary,
      _token,
      _amount,
      _intervalLength,
      _totalPayouts,
      _startTime,
      overrides || {}
    );
  }
  override attach(address: string): IntervalPayouts {
    return super.attach(address) as IntervalPayouts;
  }
  override connect(signer: Signer): IntervalPayouts__factory {
    return super.connect(signer) as IntervalPayouts__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntervalPayoutsInterface {
    return new utils.Interface(_abi) as IntervalPayoutsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntervalPayouts {
    return new Contract(address, _abi, signerOrProvider) as IntervalPayouts;
  }
}
